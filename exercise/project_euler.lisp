;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; If we list all the natural numbers below 10 that are multiples of 3 or
;; 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

;; Find the sum of all the multiples of 3 or 5 below 1000.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun sum35 (x)
  ;; not inclusive of x, it goes to x-1
  (setf a 0)
  (do
   ((i 1 (+ i 1)))
   ((> i (- x 1)) (return a))

    (when
     (or (= (mod i 3) 0) (= (mod i 5) 0))
      (setf a (+ a i)))
  ))

(sum35 1000)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Each new term in the Fibonacci sequence is generated by adding the
;; previous two terms. By starting with 1 and 2, the first 10 terms will
;; be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do notk
;; exceed four million, find the sum of the even-valued terms.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun fib (x)
  ;; this is somewhat a for loop
  (let ((a 0)(b 1)(c 0)(s 0))
    (loop 
       (when (evenp a) (setf s (+ s a)))
       ;;(format t "a is ~s, s is ~s~%"  a s)
       (when (> (+ a b) x)(return s))
	(setf c a
	      a (+ a b)
	      b c)
       )))
(fib 4000000)


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The prime factors of 13195 are 5, 7, 13 and 29.

;; What is the largest prime factor of the number 600851475143 ?
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun findPrime (x)
  ;; this is a while loop
  (loop while (= (mod x 2) 0)
     do (setf x (/ x 2))
       (print 2))

  ;(format t "current x is ~s~%" x)
  ;; this is a for loop
  (loop for i from 3 to (sqrt x) by 1
     do
       (loop while (= (mod x i) 0)
  	  do (setf x (/ x i))
  	    (print i))
       )

  (when (> x 2)
    (print x))
  )

(findPrime 13195)
(findPrime 600851475143)





;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A palindromic number reads the same both ways. The largest
;; palindrome made from the product of two 2-digit numbers is 9009 =
;; 91 × 99.

;; Find the largest palindrome made from the product of two 3-digit
;; numbers.
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun rn (x)
  ;; reverse a number in order
  (setf s 0)
  (loop while (> x 0)
     do
       (setf rr (rem x 10)
	     a (floor (/ x 10))
	     x a
	     s (+ rr (* 10 s)))
	)
  s
)

(defun parProd ()
  (setf ret 0)
  (loop for i from 101 to 1000 do
       (loop for j from 101 to 1000 do
	  (when (and (= (* i j) (rn (* i j))) (> (* i j) ret))
	    (setf ret (* i j)))
	  )
       )
  ret
  ;; last value will be returned by default
  )

;; not (parProd ())
(parProd)




;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 2520 is the smallest number that can be divided by each of the
;; numbers from 1 to 10 without any remainder.

;; What is the smallest positive number that is evenly divisible by
;; all of the numbers from 1 to 20?
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun eval5 (x)
  (setq f (list 11 12 13 14 15 16 17 18 19 20))
  ;;(setq f (list 1 2 3 4 5 6 7 8 9 10))
  (loop for i in f
     do
       (setf r (rem x i))
       (when (/= r 0) (return r))
       )
  )

(eval5 5040)

(let ((a (* 2520 19 17 13 11)))
  (loop
     (setq a (+ a 2520))
     (unless (eval5 a) (return a))
       ))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The sum of the squares of the first ten natural numbers is,

;; 12+22+...+102=385 The square of the sum of the first ten natural
;; numbers is,

;; (1+2+...+10)2=552=3025 Hence the difference between the sum of the
;; squares of the first ten natural numbers and the square of the sum is
;; 3025−385=2640.

;; Find the difference between the sum of the squares of the first one
;; hundred natural numbers and the square of the sum.
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(let ((s1 0)(s2 0))
  (loop for i from 1 to 100
     do
       (setf s1 (+ s1 i)
	     s2 (+ s2 (* i i))))
  (format t "s1 - s2 = ~s~%" (- (* s1 s1) s2))
  )



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
;; see that the 6th prime is 13.

;; What is the 10 001st prime number?
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun findPrime1 (x)
  ;; this is a while loop
  (setq a (list 0))

  (loop while (= (mod x 2) 0)
     do (setf x (/ x 2))
       (push 2 (cdr (last a)))
       )

  ;(format t "current x is ~s~%" x)
  ;; this is a for loop
  (loop for i from 3 to (sqrt x) by 1
     do
       (loop while (= (mod x i) 0)
  	  do (setf x (/ x i))
	    (push i (cdr (last a)))
	    )
       )
  (when (> x 2)
    (push x (cdr (last a)))
    )
  a
  )

(let ((i 1) (n 0) (s 10001))
  (loop while (< n s)
     do
       (setf i (+ i 1))
       (when (= (length (findprime1 i)) 2)
	 (setq n (+ n 1)))

       (when (= n s) (print i))
       ))



;; The four adjacent digits in the 1000-digit number that have the
;; greatest product are 9 × 9 × 8 × 9 = 5832.

;; 73167176531330624919225119674426574742355349194934
;; 96983520312774506326239578318016984801869478851843
;; 85861560789112949495459501737958331952853208805511
;; 12540698747158523863050715693290963295227443043557
;; 66896648950445244523161731856403098711121722383113
;; 62229893423380308135336276614282806444486645238749
;; 30358907296290491560440772390713810515859307960866
;; 70172427121883998797908792274921901699720888093776
;; 65727333001053367881220235421809751254540594752243
;; 52584907711670556013604839586446706324415722155397
;; 53697817977846174064955149290862569321978468622482
;; 83972241375657056057490261407972968652414535100474
;; 82166370484403199890008895243450658541227588666881
;; 16427171479924442928230863465674813919123162824586
;; 17866458359124566529476545682848912883142607690042
;; 24219022671055626321111109370544217506941658960408
;; 07198403850962455444362981230987879927244284909188
;; 84580156166097919133875499200524063689912560717606
;; 05886116467109405077541002256983155200055935729725
;; 71636269561882670428252483600823257530420752963450

;; Find the thirteen adjacent digits in the 1000-digit number that have
;; the greatest product. What is the value of this product?

(defvar *in*
  (remove #\newline 
"73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
"))

*in*

(let ((a *in*)
      (p 1)
      (n 13)
      (ret 0))
  (loop for i from 0 to (- (length a) n)
     do
       (loop for j from 0 to (- n 1)
	  do
	    (setq p (* p(digit-char-p (aref a (+ i j)))))
	    )
       (when (> p ret) (setq ret p))
       (setq p 1)
       )
  ret
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

;; a^2 + b^2 = c^2
;; For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

;; There exists exactly one Pythagorean triplet for which a + b + c = 1000.
;; Find the product abc.
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(loop for a from 1 to 1000
   do
     (loop for b from 1 to 1000
	do
	  (when (and (= (+ (* a a) (* b b)) (* (- 1000 a b) (- 1000 a b))) (< a b))
	    (print (list a b (- 1000 a b)))
	    (print (* a b (- 1000 a b)))
	    )))



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

;; Find the sum of all the primes below two million.
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(let ((s 0)
      ;;(upbound 10))
      (upbound 2000000))
  (loop for x from 2 to upbound do 
       (if (or
	    (/= (rem x 2) 0)
	    (/= (rem x 3) 0)
	    (/= (rem x 5) 0)
	    (/= (rem x 7) 0)
	    (/= (rem x 11) 0)
	    (/= (rem x 13) 0)
	    )
	   (when (= (length (findprime1 x)) 2)
	     (setf s (+ s x))
	     )))
  s
  )

